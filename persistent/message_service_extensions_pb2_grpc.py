# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import message_service_extensions_pb2 as message__service__extensions__pb2
import message_service_pb2 as message__service__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in message_service_extensions_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ReplicationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/chat.ReplicationService/RequestVote',
                request_serializer=message__service__extensions__pb2.VoteRequest.SerializeToString,
                response_deserializer=message__service__extensions__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.SendHeartbeat = channel.unary_unary(
                '/chat.ReplicationService/SendHeartbeat',
                request_serializer=message__service__extensions__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=message__service__extensions__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.TransferLeadership = channel.unary_unary(
                '/chat.ReplicationService/TransferLeadership',
                request_serializer=message__service__extensions__pb2.LeaderTransferRequest.SerializeToString,
                response_deserializer=message__service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.SyncOperations = channel.unary_unary(
                '/chat.ReplicationService/SyncOperations',
                request_serializer=message__service__extensions__pb2.SyncRequest.SerializeToString,
                response_deserializer=message__service__extensions__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/chat.ReplicationService/GetState',
                request_serializer=message__service__extensions__pb2.StateRequest.SerializeToString,
                response_deserializer=message__service__extensions__pb2.StateResponse.FromString,
                _registered_method=True)
        self.JoinCluster = channel.unary_unary(
                '/chat.ReplicationService/JoinCluster',
                request_serializer=message__service__extensions__pb2.JoinRequest.SerializeToString,
                response_deserializer=message__service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.LeaveCluster = channel.unary_unary(
                '/chat.ReplicationService/LeaveCluster',
                request_serializer=message__service__extensions__pb2.LeaveRequest.SerializeToString,
                response_deserializer=message__service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetClusterInfo = channel.unary_unary(
                '/chat.ReplicationService/GetClusterInfo',
                request_serializer=message__service__extensions__pb2.ClusterInfoRequest.SerializeToString,
                response_deserializer=message__service__extensions__pb2.ClusterInfoResponse.FromString,
                _registered_method=True)


class ReplicationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Leader election
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferLeadership(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncOperations(self, request, context):
        """State synchronization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinCluster(self, request, context):
        """Configuration management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=message__service__extensions__pb2.VoteRequest.FromString,
                    response_serializer=message__service__extensions__pb2.VoteResponse.SerializeToString,
            ),
            'SendHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHeartbeat,
                    request_deserializer=message__service__extensions__pb2.HeartbeatRequest.FromString,
                    response_serializer=message__service__extensions__pb2.HeartbeatResponse.SerializeToString,
            ),
            'TransferLeadership': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferLeadership,
                    request_deserializer=message__service__extensions__pb2.LeaderTransferRequest.FromString,
                    response_serializer=message__service__pb2.StatusResponse.SerializeToString,
            ),
            'SyncOperations': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncOperations,
                    request_deserializer=message__service__extensions__pb2.SyncRequest.FromString,
                    response_serializer=message__service__extensions__pb2.SyncResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=message__service__extensions__pb2.StateRequest.FromString,
                    response_serializer=message__service__extensions__pb2.StateResponse.SerializeToString,
            ),
            'JoinCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinCluster,
                    request_deserializer=message__service__extensions__pb2.JoinRequest.FromString,
                    response_serializer=message__service__pb2.StatusResponse.SerializeToString,
            ),
            'LeaveCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveCluster,
                    request_deserializer=message__service__extensions__pb2.LeaveRequest.FromString,
                    response_serializer=message__service__pb2.StatusResponse.SerializeToString,
            ),
            'GetClusterInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterInfo,
                    request_deserializer=message__service__extensions__pb2.ClusterInfoRequest.FromString,
                    response_serializer=message__service__extensions__pb2.ClusterInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/RequestVote',
            message__service__extensions__pb2.VoteRequest.SerializeToString,
            message__service__extensions__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/SendHeartbeat',
            message__service__extensions__pb2.HeartbeatRequest.SerializeToString,
            message__service__extensions__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TransferLeadership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/TransferLeadership',
            message__service__extensions__pb2.LeaderTransferRequest.SerializeToString,
            message__service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncOperations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/SyncOperations',
            message__service__extensions__pb2.SyncRequest.SerializeToString,
            message__service__extensions__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/GetState',
            message__service__extensions__pb2.StateRequest.SerializeToString,
            message__service__extensions__pb2.StateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/JoinCluster',
            message__service__extensions__pb2.JoinRequest.SerializeToString,
            message__service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/LeaveCluster',
            message__service__extensions__pb2.LeaveRequest.SerializeToString,
            message__service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/GetClusterInfo',
            message__service__extensions__pb2.ClusterInfoRequest.SerializeToString,
            message__service__extensions__pb2.ClusterInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
