syntax = "proto3";

package chat;

// Import the original message service proto to reuse message types (like StatusResponse)
import "message_service.proto";

service ReplicationService {
  // State synchronization (Raft-style)
  rpc SyncOperations(SyncRequest) returns (SyncResponse);
  rpc GetState(StateRequest) returns (StateResponse);
  
  // Configuration management
  rpc JoinCluster(JoinRequest) returns (StatusResponse);
  rpc LeaveCluster(LeaveRequest) returns (StatusResponse);
  rpc GetClusterInfo(ClusterInfoRequest) returns (ClusterInfoResponse);

  // -------------------------------------------------------
  // Primary-Backup direct state update
  // -------------------------------------------------------
  rpc PushUpdate(UpdateRequest) returns (StatusResponse);
}

// -------------------------------------------------------
// Leader election messages (from your original code)
// -------------------------------------------------------
message VoteRequest {
  string candidate_id = 1;
  int64 term = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message VoteResponse {
  bool vote_granted = 1;
  int64 term = 2;
  string message = 3;
}

message HeartbeatRequest {
  string leader_id = 1;
  int64 term = 2;
  int64 commit_index = 3;
  repeated Operation operations = 4;
}

message HeartbeatResponse {
  bool success = 1;
  int64 term = 2;
  int64 last_applied_index = 3;
  string message = 4;
}

message LeaderTransferRequest {
  string new_leader_id = 1;
  int64 term = 2;
}

// -------------------------------------------------------
// State synchronization messages
// -------------------------------------------------------
message Operation {
  int64 log_id = 1;
  string operation_type = 2;
  string parameters = 3;
  string timestamp = 4;
}

message SyncRequest {
  string replica_id = 1;
  int64 last_applied_index = 2;
  int32 max_operations = 3;
}

message SyncResponse {
  bool success = 1;
  string message = 2;
  repeated Operation operations = 3;
  int64 leader_commit_index = 4;
}

message StateRequest {
  string replica_id = 1;
}

message StateResponse {
  bool success = 1;
  string message = 2;
  bytes state_data = 3;
}

// -------------------------------------------------------
// Cluster configuration messages
// -------------------------------------------------------
message JoinRequest {
  string replica_id = 1;
  string host = 2;
  int32 port = 3;
}

message LeaveRequest {
  string replica_id = 1;
}

message ClusterInfoRequest {
  string replica_id = 1;
}

message ClusterInfoResponse {
  bool success = 1;
  string message = 2;
  string leader_id = 3;
  int64 current_term = 4;
  repeated ReplicaInfo replicas = 5;
}

message ReplicaInfo {
  string replica_id = 1;
  string host = 2;
  int32 port = 3;
  bool is_alive = 4;
  int64 last_heartbeat = 5;
}

// -------------------------------------------------------
// Primary-Backup direct update
// -------------------------------------------------------
message UpdateRequest {
  string update_type = 1;
  map<string, string> parameters = 2;
}
